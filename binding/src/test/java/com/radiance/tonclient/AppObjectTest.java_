package com.radiance.tonclient;

import org.junit.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

import java.util.*;
import java.math.*;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.*;
import com.fasterxml.jackson.databind.JsonNode;

public class AppObjectTest extends TestBase {

    @Test
    public void test() throws Exception {
        CompletableFuture<Integer> res = crypto.registerSigningBox(new AppSigningBox() {
            public CompletableFuture<String> getPublicKey() {
                return CompletableFuture.completedFuture("abcdef");
            }

            public CompletableFuture<String> sign(String unsigned) {
                return CompletableFuture.completedFuture("0123456789abcdef");
            };
        });

        Integer handle = res.get();
        //TONContext.convertValue(res.get().findValue("handle"), Integer.class);
        System.out.println("Handle: " + handle);

        CompletableFuture<Abi.ResultOfEncodeMessageBody> encoded = abiModule.encodeMessageBody(
            abiFromResource("/Transfer.abi.json"),
            new Abi.CallSet("transfer", null, "{\"comment\":\""+ (new BigInteger(1, "Hello friend!!!".getBytes()).toString(16)) +"\"}"),
            true,
            new Abi.Signer.SigningBox(handle),
            //Abi.Signer.None,
            null
        );

        /*
        Thread.sleep(200);
        client.resolveAppRequest(2, new Client.AppRequestResult.Ok("{\"type\":\"GetPublicKey\", \"public_key\":\"\"}"));
        Thread.sleep(200);
        client.resolveAppRequest(3, new Client.AppRequestResult.Ok("{\"type\":\"Sign\", \"signature\":\"\"}"));
        */
        
        System.out.println("Encoded: " + encoded.get());
        crypto.removeSigningBox(handle);
    }
}